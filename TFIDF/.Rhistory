right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))
/nrow(dat)
if (correct > prev_correct) {print (correct)
break}
}}}}
fit.decision.tree = function(predictors, dat) {
prev_correct = 0
correct = 0
while (correct >= prev_correct){
prev_correct = correct
for (j in 1:length(predictors)){
print (j)
for (s in 1:max(dat[predictors[j]])){
print(s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))
/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree = function(predictors, dat) {
prev_correct = 0
correct = 0
while (correct >= prev_correct){
prev_correct = correct
for (j in 1:length(predictors)){
print (j)
for (s in 1:max(dat[predictors[j]])){
print(s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
?break
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = 0
correct = 0
while (correct >= prev_correct){
prev_correct = correct
for (j in 1:length(predictors)){
print (j)
for (s in 1:max(dat[predictors[j]])){
print(s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
fit.decision.tree = function(predictors, dat) {
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (j)
for (s in 1:max(dat[predictors[j]])){
print(s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
fit.decision.tree = function(predictors, dat) {
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print ("j"+j)
for (s in 1:max(dat[predictors[j]])){
print("s" + s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
print ("j" j)
print ("j", j)
?print
print ("j" + str(j)
for (s in 1:max(dat[predictors[j]])){
print("s" + s)
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
sample.tree = list(split = c(1,2.4),
left.subtree = list(split = c(2,1.2),
left.subtree = list(data = c(1,2)),
right.subtree = list(data = c(3,4))),
right.subtree = list(split = c(3,4.6),
left.subtree = list(data = c(5,6)),
right.subtree = list(data = c(7,8))))
print ("j" + str(j))
print (c("j",j))
fit.decision.tree = function(predictors, dat) {
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
correct = 0
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
print(prev_correct)
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
}}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
print(prev_correct)
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
}}}
fit.decision.tree(predictors = predictors, dat= iris.train)
fit.decision.tree(predictors = predictors, dat= iris.train)
iris.tree<- fit.decision.tree(predictors = predictors, dat= iris.train)
iris.preds<- predict(iris.tree, newdata = iris.test, type = "prob")
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
print(prev_correct)
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
return(tree)
}}}}
iris.tree<- fit.decision.tree(predictors = predictors, dat= iris.train)
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
print(prev_correct)
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
}}}
return(tree)}
iris.tree<- fit.decision.tree(predictors = predictors, dat= iris.train)
correct = 0
fit.decision.tree = function(predictors, dat) {
prev_correct = correct
print(prev_correct)
while (correct <= prev_correct){
for (j in 1:length(predictors)){
print (c("j",j))
for (s in 1:max(dat[predictors[j]])){
print(c("s",s))
tree = list(split(predictors[j], s),
left.subtree = which(dat[predictors[j]] < s),
right.subtree = which(dat[predictors[j]] >= s))
left.pred = Mode(as.character(dat[tree$left.subtree, "Species"]))
right.pred = Mode(as.character(dat[tree$right.subtree, "Species"]))
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)
if (correct > prev_correct) {
print(correct)
break}
}}}
return(tree)}
iris.tree<- fit.decision.tree(predictors = predictors, dat= iris.train)
iris.preds<- predict(iris.tree, newdata = iris.test, type = "prob")
?sort
FPR<- function(thresh, pred_prob, true.value) {
FP = sum(pred_prob>=thresh && true.value == "versicolor")
num.neg = sum(true.value == "versicolor")
FP/num.neg}
?sapply
preds<- sample(0:1, 10, replace = TRUE)
probs<- seq(0, 1, .001)
preds<- sample(probs, 10, replace = TRUE)
prob_thresh<- seq(1, 0, .1)
prob_thresh<- seq(1, 0, -.1)
FPR<- function(thresh, pred_prob, true.value) {
FP = sum(pred_prob[i]>=thresh && true.value == "versicolor")
num.neg = sum(true.value == "versicolor")
FP/num.neg}
x<- sapply(prob_thresh, pred_prob = preds, true.value = iris.test$Species)
x<- sapply(prob_thresh, FPR, pred_prob = preds, true.value = iris.test$Species)
FPR<- function(thresh, pred_prob, true.value) {
FP = sum(pred_prob>=thresh && true.value == "versicolor")
num.neg = sum(true.value == "versicolor")
FP/num.neg}
x<- sapply(prob_thresh, FPR, pred_prob = preds, true.value = iris.test$Species)
sum(pred_prob>=thresh && true.value == "versicolor")
pred_prob = preds
sum(pred_prob>=thresh && true.value == "versicolor")
thresh<- prob_thresh
true.value = iris.test$Species
sum(pred_prob>=thresh && true.value == "versicolor")
prob_thresh<- seq(1, 0.1, -.1)
thresh<- prob_thresh
sum(pred_prob>=thresh && true.value == "versicolor")
pred_prob>=thresh
true.value == "versicolor"
preds<- sample(probs, 30, replace = TRUE)
prob_thresh<- seq(1, 0, -.001)
x.FPR<- sapply(prob_thresh, FPR, pred_prob = preds, true.value = iris.test$Species)
y.TPR<- sapply(prob_thresh, TPR, pred_prob = iris.preds, true.value = iris.test$Species)
TPR<- function(thresh, pred_prob, true.value) {
TP = sum(pred_prob>=thresh && true.value == "setosa")
num.pos = sum(true.value == "setosa")
TP/num.pos}
y.TPR<- sapply(prob_thresh, TPR, pred_prob = iris.preds, true.value = iris.test$Species)
y.TPR<- sapply(prob_thresh, TPR, pred_prob = preds, true.value = iris.test$Species)
plot(y.TPR~x.FPR)
predict.tree<- function(tree, dat){
correct = (sum(left.pred == dat[tree$left.subtree,"Species"])+
sum(right.pred == dat[tree$right.subtree,"Species"]))/nrow(dat)}
iris.preds<- predict.tree(iris.tree, dat = iris.test, type = "prob")
iris.preds<- predict.tree(iris.tree, dat = iris.test)
library(readr)
library(stringr)
library(tm)
library(NLP)
library(tidytext)
library(tidyverse)
library(plyr)
library(dplyr)
library(boot)
library(data.table)
brain<- cbind.data.frame(brain, cell.type)
brain$ID<- seq.int(nrow(brain))
brain<- brain[ ,c(8958, 8957, 1:8956)]
brain<- brain[1:8907]
load("C:/Users/mkw5c/OneDrive/Documents/Capstone/topic modeling and RNA seq/TFIDF envirionment 11.6.RData")
library(readr)
library(stringr)
library(tm)
library(NLP)
library(tidytext)
library(tidyverse)
library(plyr)
library(dplyr)
library(boot)
library(data.table)
brain1.1[1:5, ]
names(brain1.1)[3:4]<- c("Gene", "Exp.Level")
brain1.1[1:5, ]
str(brain1.1)
sum(is.na(brain1.1["Exp.Level"]))
zero_exp<- which(brain1.1$Exp.Level == 0)
brain1.1_trim <- brain1.1[-zero_exp, ]
brain2[1:5, 1:5]
brain2<- cbind.data.frame(brain2, cell.type)
brain2$ID<- seq.int(nrow(brain2))
brain2<- brain2[ ,c(8957, 8958, 1:8956)]
brain2<- brain2[1:8907]
brain2[sapply(brain2, is.factor)] = lapply(brain2[sapply(brain2, is.factor)], as.character)
brain2.1<- cbind(brain2[1:2], stack(brain2[3:8907]))
brain2.1<- brain2.1[,c(1,2,4,3)]
names(brain2.1)[3:4]<- c("Gene", "IDF.Exp")
brain2.1[1:5, ]
str(brain2.1)
brain2<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\r codes\\brain2.csv")
brain2[1:5, 1:5]
brain3<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\r codes\\brain2.csv")
brain2[1:5, 8900:8905]
brain2<- cbind.data.frame(brain2, cell.type)
brain2$ID<- seq.int(nrow(brain2))
brain2[1:5, 1:5]
brain2[1:5, 8905:8907]
brain2[1:5, c(1,8905:8907)]
library(readr)
library(stringr)
library(tm)
library(NLP)
library(tidytext)
library(tidyverse)
library(plyr)
library(dplyr)
library(boot)
library(data.table)
quantile(brain2.1$IDF.Exp)
brain_words[1:5, ]
brain_words1.2<- bind_tf_idf(tbl = brain_words, term = Gene, document = celltype,  n = n)
brain_words1.2[1:5,]
brain_sumexp[1:5,]
names(brain_sumexp)<- c("celltype","Gene", "sum.Exp.Level")
brain_sumexp1.2<- bind_tf_idf(tbl = brain_sumexp, term = Gene, document = celltype,  n = sum.Exp.Level)
brain_sumexp1.2[1:5,]
unique(brain_sumexp1.2$idf)  #all zero ?
brain<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\r codes\\brain.csv")
setwd("C:/Users/mkw5c/OneDrive/Documents/Capstone")
brain<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\r codes\\brain.csv")
library(readr)
library(stringr)
library(tm)
library(NLP)
library(tidytext)
library(tidyverse)
library(plyr)
library(dplyr)
library(boot)
library(data.table)
brain<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\r codes\\brain.csv")
cell.type<- read_csv("C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\cells2902.csv")
library(readr)
library(SCAN.UPC)
mrna.counts <- read.delim("C:/Users/mkw5c/OneDrive/Documents/Capstone/MRNA LUN.txt",
stringsAsFactors=FALSE, header=FALSE, row.names=1, skip=11)[,-1]
UPC_RNASeq("C:/Users/mkw5c/OneDrive/Documents/Capstone/lun.mrna.counts4.txt",
outFilePath = "C:\\Users\\mkw5c\\OneDrive\\Documents\\Capstone\\upc_outfile.csv",
verbose = FALSE)
library(readr)
setwd("~/NeuroimmunologyCapstone/TFIDF")
cell_doc_brain<- read_csv("processed_lun.csv")
cell_doc_brain["X"]<- NULL
cell_doc_brain[1:2 , c(1:10,8851:8856)]
cell_doc_brain["X1"]<- NULL
cell_doc_brain[1:2 , c(1:10,8851:8856)]
numcellspos<- rep(0, 8856)
for (i in 1:8856) {
numcellspos[i]<- sum(as.numeric(cell_doc_brain[,i])>0)
}
i = 1
(cell_doc_brain[,i])>0)
cell_doc_brain[,i]
as.numeric(cell_doc_brain[,i])
str(cell_doc_brain)
numcellspos<- rep(0, 8851)
for (i in 6:8856) {
numcellspos[i]<- sum(as.numeric(cell_doc_brain[,i])>0)
}
numcellspos<- rep(0, 8851)
for (i in 6:8856) {
numcellspos[i]<- sum(cell_doc_brain[,i]>0)
}
print(numcellspos[1:10])
idf<- function(n, npos) {
log(n/npos)
}
idf_scores<- sapply(numcellspos, idf, n=nrow(cell_doc_brain[,6:8856]))
print(idf_scores[1:10])
cell_doc_brain2<-as.data.frame(cell_doc_brain)
idf_vector<- as.vector(idf_scores)
for (i in 6:8956){
cell_doc_brain2[ ,i]<- as.numeric(cell_doc_brain2[,i])*idf_vector[i]
}
for (i in 6:8856){
cell_doc_brain2[,i]<- as.numeric(cell_doc_brain2[,i])*idf_vector[i]
}
cell_doc_brain[1:5, 1:5]
cell_doc_brain[1:5, C(1, 5:10)]
cell_doc_brain[1:5, c(1, 5:10)]
cell_doc_brain2[1:5, c(1, 5:10)]
sum_exp<- rep(0, 2902)
sum(cell_doc_brain[1,])
sum(cell_doc_brain[1,6:8856])
sum_exp<- rep(0, 2902)
for (i in 1:2902) {
sum_exp[i] <- sum(cell_doc_brain[i, 6:8856])
}
?apply
sum_exp<- apply(cell_doc_brain[,6:8856], 1, sum)
cell_doc_brain2<- cell_doc_brain
cell_doc_brain2<- as.data.frame(cell_doc_brain)
for (i in 1:2902){
cell_doc_brain2[i,]<- as.numeric(cell_doc_brain2[i,])/sum_exp[i]
}
warnings()
apply(cell_doc_brain2, 1, function(x,y){x/y}, y = sum_exp)
str(cell_doc_brain2)
mapply(cell_doc_brain2, 1, function(x,y){x/y}, y = sum_exp)
cell_doc_brain2[i, 6:8856]<- as.numeric(cell_doc_brain2[i, 6:8856])/sum_exp[i]
for (i in 1:2902){
cell_doc_brain2[i, 6:8856]<- as.numeric(cell_doc_brain2[i, 6:8856])/sum_exp[i]
}
cell_doc_brain2<- as.data.frame(cell_doc_brain)
sum_exp<- apply(cell_doc_brain[,6:8856], 1, sum)
for (i in 1:2902){
cell_doc_brain2[i, 6:8856]<- as.numeric(cell_doc_brain2[i, 6:8856])/sum_exp[i]
}
for (i in 1:2902){
print(i)
cell_doc_brain2[i, 6:8856]<- as.numeric(cell_doc_brain2[i, 6:8856])/sum_exp[i]
}
cell_doc_brain3<-as.data.frame(cell_doc_brain2)
idf_vector<- as.vector(idf_scores)
cell_doc_brain3[,6:8856] <- apply(cell_doc_brain3[,6:8856], 2, function(col, x){col*x}, x = idf_vector[6:8856])
warnings()
cell_doc_brain3[1:5, c(1, 5:10)]
cell_doc_brain2[1:5, c(1, 5:10)]
cell_doc_brain[1:5, c(1, 5:10)]
cell_doc_brain2[1:5, c(1, 5:10)]
cell_doc_brain3[1:5, c(1, 5:10)]
write.csv(cell_doc_brain3, "tfidf_by_cell_Lun.csv")
